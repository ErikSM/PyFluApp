                            4.8. Ordenando texto Unicode

    * O Python ordena sequências de qualquer tipo comparando um por um os itens em cada sequência.

    Para strings, isso significa comparar pontos de código. Infelizmente, isso produz resultados
inaceitáveis para qualquer um que use caracteres não-ASCII.



Considere ordenar uma lista de frutas cultivadas no Brazil:

-----------------------------------------------------------------------------------------
>>> fruits = ['caju', 'atemoia', 'cajá', 'açaí', 'acerola']
>>> sorted(fruits)
['acerola', 'atemoia', 'açaí', 'caju', 'cajá']
-----------------------------------------------------------------------------------------

    As regras de ordenação variam entre diferentes locales, mas em português e em muitas línguas que
usam o alfabeto latino, acentos e cedilhas raramente fazem diferença na ordenação.[51] Então "cajá" é
lido como "caja," e deve vir antes de "caju."


A lista fruits ordenada deveria ser:

-------------------------------------------------------
['açaí', 'acerola', 'atemoia', 'cajá', 'caju']
-------------------------------------------------------

    O modo padrão de ordenar texto não-ASCII em Python é usar a função locale.strxfrm que, conforme a
documentação do módulo locale:
    ** "Transforma uma string em uma que pode ser usada em comparações com reconhecimento de localidade."

    (https://docs.python.org/pt-br/3/library/locale.html#locale.strxfrm)

    Para poder usar locale.strxfrm, você deve primeiro definir um locale adequado para sua aplicação, e
rezar para que o SO o suporte.



    A sequência de comando no Exemplo 19 pode funcionar para você.

-----------------------------------------------------------------------------------------------
Exemplo 19. locale_sort.py: Usando a função locale.strxfrm como chave de ornenamento
import locale
my_locale = locale.setlocale(locale.LC_COLLATE, 'pt_BR.UTF-8')
print(my_locale)
fruits = ['caju', 'atemoia', 'cajá', 'açaí', 'acerola']
sorted_fruits = sorted(fruits, key=locale.strxfrm)
print(sorted_fruits)
-----------------------------------------------------------------------------------------------



    Executando o Exemplo 19 no GNU/Linux (Ubuntu 19.10) com o locale pt_BR.UTF-8 instalado, consigo o resultado
correto:

---------------------------------------------------------------
'pt_BR.UTF-8'
['açaí', 'acerola', 'atemoia', 'cajá', 'caju']
---------------------------------------------------------------

    Portanto, você precisa chamar setlocale(LC_COLLATE, «your_locale») antes de usar locale.strxfrm como a chave
de ordenação.



     Porém, aqui vão algumas ressalvas:
---------------------------------------------------------------------------------------------------------------------
                -   Como as configurações de locale são globais, não é recomendado chamar setlocale
                    em uma biblioteca. Sua aplicação ou framework deveria definir o locale no início
                    do processo, e não mudá-lo mais depois disso.

                -   O locale desejado deve estar instalado no SO, caso contrário setlocale gera uma
                    exceção de locale.Error: unsupported locale setting.

                -   Você tem que saber como escrever corretamente o nome do locale.

                -   O locale precisa ser corretamente implementado pelos desenvolvedores do SO. Tive
                    sucesso com o Ubuntu 19.10, mas não no macOS 10.14. No macOS, a chamada
                    setlocale(LC_COLLATE, 'pt_BR.UTF-8') devolve a string 'pt_BR.UTF-8' sem qualquer
                    reclamação. Mas sorted(fruits, key=locale.strxfrm) produz o mesmo resultado incorreto
                    de sorted(fruits). Também tentei os locales fr_FR, es_ES, e de_DE no macOS, mas
                    locale.strxfrm nunca fez seu trabalho direito.
---------------------------------------------------------------------------------------------------------------------

    Portanto, a solução da biblioteca padrão para ordenação internacionalizada funciona, mas parece ter suporte
adequado apenas no GNU/Linux (talvez também no Windows, se você for um especialista). Mesmo assim, ela depende
das configurações do locale, criando dores de cabeça na implantação.

    * Felizmente, há uma solução mais simples: a biblioteca pyuca, disponível no PyPI.


            # Ordenando com o Algoritmo de Ordenação do Unicode

    James Tauber, contribuidor muito ativo do Django, deve ter sentido essa nossa mesma dor, e criou a pyuca,
uma implementação integralmente em Python do Algoritmo de Ordenação do Unicode (UCA, sigla em inglês para
Unicode Collation Algorithm).

    *  (funciona no GNU/Linux, no macOS, e no Windows)

