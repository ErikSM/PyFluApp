                            4.9. O banco de dados do Unicode


    O padrão Unicode fornece todo um banco de dados—na forma de vários arquivos de texto estruturados—que
inclui não apenas a tabela mapeando pontos de código para nomes de caracteres, mas também metadados sobre
os caracteres individuais e como eles se relacionam.

    Por exemplo, o banco de dados do Unicode registra se um caractere pode ser impresso, se é uma letra, um
dígito decimal ou algum outro símbolo numérico. É assim que os métodos de str isalpha, isprintable, isdecimal
e isnumeric funcionam. str.casefold também usa informação de uma tabela do Unicode.

                    A função unicodedata.category(char) devolve uma categoria de char com duas letras,
                    do banco de dados do Unicode. Os métodos de alto nível de str são mais fáceis de
                    usar.
                        Por exemplo, label.isalpha() devolve True se todos os caracteres em label
                    pertencerem a uma das seguintes categorias: Lm, Lt, Lu, Ll, or Lo.

                        * Para descobrir o que esses códigos significam, na Wikipedia em inglês, veja:
                                    - O topico: "General Category"
                                            (https://en.wikipedia.org/wiki/Unicode_character_property#General_Category)
                                    - No Artigo: "Unicode character property"
                                            (https://en.wikipedia.org/wiki/Unicode_character_property)





            # Encontrando caracteres por nome


    O módulo unicodedata tem funções para obter os metadados de caracteres, incluindo unicodedata.name(), que
devolve o nome oficial do caractere no padrão.

---------------------------------------------
>>> from unicodedata import name
>>> name('A')
'LATIN CAPITAL LETTER A'
>>> name(ã)
'LATIN SMALL LETTER A WITH TILDE'
---------------------------------------------

    Você pode usar a função name() para criar aplicações que permitem aos usuários buscarem caracteres por nome.




    Em outro Exemplo abaixo, observe que o comando if, na função find, usa o método .issubset() para testar
rapidamente se todas as palavras no conjunto query aparecem na lista de palavras criada a partir do nome do
caractere. Graças à rica API de conjuntos do Python, não precisamos de um loop for aninhado e de outro if para implementar essa
verificação.

------------------------------------------------------------------------------------------
Exemplo 21. cf.py: o utilitário de busca de caracteres
------------------------------------------------------------------------------------------

#!/usr/bin/env python3
import sys
import unicodedata

START, END = ord(' '), sys.maxunicode + 1           # (1)

def find(*query_words, start=START, end=END):       # (2)
    query = {w.upper() for w in query_words}        # (3)
    for code in range(start, end):
        char = chr(code)                            # (4)
        name = unicodedata.name(char, None)         # (5)
        if name and query.issubset(name.split()):   # (6)
            print(f'U+{code:04X}\t{char}\t{name}')  # (7)

def main(words):
    if words:
        find(*words)
    else:
        print('Please provide words to find.')

if __name__ == '__main__':
    main(sys.argv[1:])
------------------------------------------------------------------------------------------
        1.Configura os defaults para a faixa de pontos de código da busca.
        2.find aceita query_words e somente argumentos nomeados (opcionais) para limitar a
            faixa da busca, facilitando os testes.
        3.Converte query_words em um conjunto de strings capitalizadas.
        4.Obtém o caractere Unicode para code.
        5.Obtém o nome do caractere, ou None se o ponto de código não estiver atribuído a
            um caractere.
        6.Se há um nome, separa esse nome em uma lista de palavras, então verifica se o
            conjunto query é um subconjunto daquela lista.
        7.Mostra uma linha com o ponto de código no formato U+9999, o caractere e seu nome.






            # O sentido numérico de caracteres


    O módulo unicodedata inclui funções para determinar se um caractere Unicode representa um número e, se
for esse o caso, seu valor numérico em termos humanos—em contraste com o número de seu ponto de código.



    O Exemplo demonstra o uso de unicodedata.name() e unicodedata.numeric(), junto com os métodos .isdecimal()
e .isnumeric() de str.


-----------------------------------------------------------------------------------------
Exemplo: Demo do banco de dados Unicode de metadados de caracteres numéricos
(as notas explicativas descrevem cada coluna da saída)
-----------------------------------------------------------------------------------------
import unicodedata
import re

re_digit = re.compile(r'\d')

sample = '1\xbc\xb2\u0969\u136b\u216b\u2466\u2480\u3285'

for char in sample:
    print(f'U+{ord(char):04x}',                       # (1)
          char.center(6),                             # (2)
          're_dig' if re_digit.match(char) else '-',  # (3)
          'isdig' if char.isdigit() else '-',         # (4)
          'isnum' if char.isnumeric() else '-',       # (5)
          f'{unicodedata.numeric(char):5.2f}',        # (6)
          unicodedata.name(char),                     # (7)
          sep='\t')
-----------------------------------------------------------------------------------------
        1.Ponto de código no formato U+0000.
        2.O caractere, centralizado em uma str de tamanho 6.
        3.Mostra re_dig se o caractere casa com a regex r'\d'.
        4.Mostra isdig se char.isdigit() é True.
        5.Mostra isnum se char.isnumeric() é True.
        6.Valor numérico formatado com tamanho 5 e duas casa decimais.
        7.O nome Unicode do caractere.

