                            5.7. A classe de dados como cheiro no código

    Independente de você implementar uma classe de dados escrevendo todo o código ou aproveitando as
facilidades oferecidas por alguma das fábricas de classes descritas nesse capítulo, fique alerta: isso
pode sinalizar um problema em seu design.

    *       No Refactoring: Improving the Design of Existing Code (Refatorando: Melhorando o
        Design de Código Existente), 2nd ed. (Addison-Wesley),
        - (https://martinfowler.com/books/refactoring.html) -
            Martin Fowler e Kent Beck apresentam um catálogo de "cheiros no código", padrões no
        código que podem indicar a necessidade de refatoração.
            O verbete entitulado "Data Class" (Classe de Dados) começa assim:

                                            "Essas são classes que tem campos, métodos para obter e
                                            definir os campos, e nada mais. Tais classes são recipientes
                                            burros de dados, e muitas vezes são manipuladas de forma
                                            excessivamente detalhada por outras classes."

    A principal ideia da programação orientada a objetos é manter o comportamento e os dados juntos, na
mesma unidade de código: uma classe. Se uma classe é largamente utilizada mas não tem qualquer
comportamento próprio significativo, é bem provável que o código que interage com as instâncias dessa
classe esteja espalhado (ou mesmo duplicado) em métodos e funções ao longo de todo o sistema - uma
receita para dores de cabeça na manutenção. Por isso, as refatorações de Fowler para lidar com uma
classe de dados envolvem trazer responsabilidades de volta para a classe.



    Levando o que foi dito acima em consideração, há alguns cenários comuns onde faz sentido ter um
classe de dados com pouco ou nenhum comportamento.



            # A classe de dados como um esboço

    Nesse cenário, a classe de dados é uma implementação simplista inicial de uma classe, para dar
início a um novo projeto ou módulo. Com o tempo, a classe deve ganhar seus próprios métodos, deixando
de depender de métodos de outras classes para operar sobre suas instâncias. O esboço é temporário; ao
final do processo, sua classe pode se tornar totalmente independente da fábrica usada inicialmente
para criá-la.
    O Python também é muito usado para resolução rápida de problemas e para experimentaçào, e nesses
casos é aceitável deixar o esboço pronto para uso.



            # A classe de dados como representação intermediária

    Uma classe de dados pode ser útil para criar registros que serão exportados para o JSON ou algum
outro formato de intercomunicação, ou para manter dados que acabaram de ser importados, cruzando
alguma fronteira do sistema. Todas as fábricas de classes de dados do Python oferecem um método ou
uma função para converter uma instância em um dict simples, e você sempre pode invocar o construtor
com um dict, usado para passar argumentos nomeados expandidos com **. Um dict desses é muito similar
a um registro JSON.

    Nesse cenário, as instâncias da classe de dados devem ser tratadas como objetos imutáveis —mesmo
que os campos sejam mutáveis, não deveriam ser modificados nessa forma intermediária. Mudá-los
significa perder o principal benefício de manter os dados e o comportamento próximos. Quando o
processo de importação/exportação exigir mudança nos valores, você deve implementar seus próprios
métodos de fábrica, em vez de usar os métodos "as dict" existentes ou os construtores padrão.

