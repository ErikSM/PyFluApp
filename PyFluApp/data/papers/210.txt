                            2.10. Quando uma lista não é a resposta


    O tipo list é flexível e fácil de usar mas, dependendo dos requerimentos específicos, há opções
melhores. Por exemplo, um array economiza muita memória se você precisa manipular milhões de
valores de ponto flutuante. Por outro lado, se você está constantemente acrescentando e removendo
itens das pontas opostas de uma lista, é bom saber que um deque (uma fila com duas pontas) é uma
estrutura de dados FIFO[20] mais eficiente.

                    * Se seu código frequentemente verifica se um item está presente em uma coleção (por exemplo,
                item in my_collection), considere usar um set para my_collection, especialmente se ela contiver
                um número grande de itens. Um set é otimizado para verificação rápida de presença de itens. Eles
                também são iteráveis, mas não são coleções, porque a ordenação de itens de sets não é especificada.




            # Arrays:

    Se uma lista contém apenas números, uma array.array é um substituto mais eficiente. Arrays
suportam todas as operações das sequências mutáveis (incluindo .pop, .insert, e .extend), bem como
métodos adicionais para carregamento e armazenamento rápidos, tais como .frombytes e .tofile.


Criando, armazenando e carregando uma grande array de números de ponto flutuante:
---------------------------------------------------------------------------------------------------
>>> from array import array  (1)
>>> from random import random
>>> floats = array('d', (random() for i in range(10**7)))  (2)
>>> floats[-1]  (3)
0.07802343889111107
>>> fp = open('floats.bin', 'wb')
>>> floats.tofile(fp)  (4)
>>> fp.close()
>>> floats2 = array('d')  (5)
>>> fp = open('floats.bin', 'rb')
>>> floats2.fromfile(fp, 10**7)  (6)
>>> fp.close()
>>> floats2[-1]  (7)
0.07802343889111107
>>> floats2 == floats  (8)
True
---------------------------------------------------------------------------------------------------
1.Importa o tipo array.
2.Cria um array de números de ponto flutuante de dupla precisão (código de tipo 'd') a partir de
qualquer objeto iterável—nesse caso, uma expressão geradora.
3.Inspeciona o último número no array.
4.Salva o array em um arquivo binário.
5.Cria um array vazio de números de ponto flutuante de dupla precisão
6.Lê 10 milhões de números do arquivo binário.
7.Inspeciona o último número no array.
8.Verifica a igualdade do conteúdo dos arrays



            # Views de memória:


    A classe embutida memoryview é um tipo sequência de memória compartilhada, que permite manipular
fatias de arrays sem copiar bytes. Ela foi inspirada pela biblioteca NumPy.

                * Uma memoryview é essencialmente uma estrutura de array Numpy generalizada dentro do próprio
            Python (sem a matemática). Ela permite compartilhar memória entre estruturas de dados (coisas como
            imagens PIL, bancos de dados SQLite, arrays da NumPy, etc.) sem copiar antes. Isso é muito importante
            para conjuntos grandes de dados.


Manipular 6 bytes de memória como views de 1×6, 2×3, e 3×2:
---------------------------------------------------------------------------------------------------
>>> from array import array
>>> octets = array('B', range(6))  # (1)
>>> m1 = memoryview(octets)  # (2)
>>> m1.tolist()
[0, 1, 2, 3, 4, 5]
>>> m2 = m1.cast('B', [2, 3])  # (3)
>>> m2.tolist()
[[0, 1, 2], [3, 4, 5]]
>>> m3 = m1.cast('B', [3, 2])  # (4)
>>> m3.tolist()
[[0, 1], [2, 3], [4, 5]]
>>> m2[1,1] = 22  # (5)
>>> m3[1,1] = 33  # (6)
>>> octets  # (7)
array('B', [0, 1, 2, 33, 22, 5])
---------------------------------------------------------------------------------------------------
1.Cria um array de 6 bytes (código de tipo 'B').
2.Cria uma memoryview a partir daquele array, e a exporta como uma lista.
3.Cria uma nova memoryview a partir da anterior, mas com 2 linhas e 3 colunas.
4.Ainda outra memoryview, agora com 3 linhas e 2 colunas.
5.Sobreescreve o byte em m2, na linha 1, coluna 1 com 22.
6.Sobrescreve o byte em m3, na linha 1, coluna 1 com 33.
7.Mostra o array original, provando que a memória era compartilhada entre octets, m1, m2, e m3.




             # NumPy:

    Por suas operações avançadas de arrays e matrizes, o Numpy é a razão pela qual o Python se tornou
uma das principais linguagens para aplicações de computação científica. A Numpy implementa tipos
multidimensionais e homogêneos de arrays e matrizes, que podem conter não apenas números, mas também
registros definidos pelo usuário. E fornece operações eficientes ao nível desses elementos.
    A SciPy é uma biblioteca criada usando a NumPy, e oferece inúmeros algoritmos de computação científica,
incluindo álgebra linear, cálculo numérico e estatística. A SciPy é rápida e confiável porque usa a popular
base de código C e Fortran do Repositório Netlib. Em outras palavras, a SciPy dá a cientistas o melhor de
dois mundos: um prompt iterativo e as APIs de alto nível do Python, junto com funções estáveis e de
eficiência comprovada para processamento de números, otimizadas em C e Fortran.



Operações básicas com linhas e colunas em uma numpy.ndarray:
---------------------------------------------------------------------------------------------------
>>> import numpy as np (1)
>>> a = np.arange(12)  (2)
>>> a
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
>>> type(a)
<class 'numpy.ndarray'>
>>> a.shape  (3)
(12,)
>>> a.shape = 3, 4  (4)
>>> a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>> a[2]  (5)
array([ 8,  9, 10, 11])
>>> a[2, 1]  (6)
9
>>> a[:, 1]  (7)
array([1, 5, 9])
>>> a.transpose()  (8)
array([[ 0,  4,  8],
       [ 1,  5,  9],
       [ 2,  6, 10],
       [ 3,  7, 11]])
---------------------------------------------------------------------------------------------------
1.Importa a NumPy, que precisa ser instalada previamente (ela não faz parte da biblioteca padrão
do Python). Por convenção, numpy é importada como np.
2.Cria e inspeciona uma numpy.ndarray com inteiros de 0 a 11.
3.Inspeciona as dimensões do array: essa é um array com uma dimensão e 12 elementos.
4.Muda o formato do array, acrescentando uma dimensão e depois inspecionando o resultado.
5.Obtém a linha no índice 2
6.Obtém elemento na posição 2, 1.
7.Obtém a coluna no índice 1
8.Cria um novo array por transposição (permutando as colunas com as linhas)





            # Deques e outras filas:


    Os métodos .append e .pop tornam uma list usável como uma pilha (stack) ou uma fila (queue).
(usando .append e .pop(0), se obtém um comportamento FIFO). Mas inserir e remover da cabeça de uma
lista (a posição com índice 0) é caro, pois a lista toda precisa ser deslocada na memória.
    A classe collections.deque é uma fila de duas pontas e segura para usar com threads, projetada
para inserção e remoção rápida nas duas pontas. É também a estrutura preferencial se você precisa
manter uma lista de "últimos itens vistos" ou coisa semelhante, pois um deque pode ser delimitado.
Isto é, criado com um tamanho máximo fixo. Se um deque delimitado está cheio, quando se adiciona um
novo item, o item na ponta oposta é descartado.



Usando um deque:
---------------------------------------------------------------------------------------------------
>>> from collections import deque
>>> dq = deque(range(10), maxlen=10)  (1)
>>> dq
deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)
>>> dq.rotate(3)  (2)
>>> dq
deque([7, 8, 9, 0, 1, 2, 3, 4, 5, 6], maxlen=10)
>>> dq.rotate(-4)
>>> dq
deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], maxlen=10)
>>> dq.appendleft(-1)  (3)
>>> dq
deque([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)
>>> dq.extend([11, 22, 33])  (4)
>>> dq
deque([3, 4, 5, 6, 7, 8, 9, 11, 22, 33], maxlen=10)
>>> dq.extendleft([10, 20, 30, 40])  (5)
>>> dq
deque([40, 30, 20, 10, 3, 4, 5, 6, 7, 8], maxlen=10)
---------------------------------------------------------------------------------------------------
    1.O argumento opcional maxlen determina o número máximo de itens permitidos nessa instância de
      deque; isso estabelece o valor de um atributo de instância maxlen, somente de leitura.
    2.Rotacionar com n > 0 retira itens da direita e os recoloca pela esquerda; quando n < 0, os itens
      são retirados pela esquerda e anexados pela direita.
    3.Acrescentar itens a um deque cheio (len(d) == d.maxlen) elimina itens da ponta oposta. Observe,
      na linha seguinte, que o 0 foi descartado.
    4.Acrescentar três itens à direita derruba -1, 1, e 2 da extremidade esquerda.
    5.Observe que extendleft(iter) acrescenta cada item sucessivo do argumento iter do lado esquerdo
      do deque, então a posição final dos itens é invertida.



    ** Além de deque, outros pacotes da biblioteca padrão do Python implementam filas:
        - queue
        - multiprocessing
        - asyncio
        - heapq

