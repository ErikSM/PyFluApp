                            3.4. A API padrão dos tipos de mapeamentos


    O módulo collections.abc contém as ABCs Mapping e MutableMapping, descrevendo as interfaces de dict e de tipos
similares.

    A maior utilidade dessas ABCs é documentar e formalizar as interfaces padrão para os mapeamentos, e servir de
critério para testes com isinstance em código que precise suportar mapeamentos de forma geral:


---------------------------------------------------------------------------------
                >>> my_dict = {}
                >>> isinstance(my_dict, abc.Mapping)
                True
                >>> isinstance(my_dict, abc.MutableMapping)
                True
---------------------------------------------------------------------------------


** Usar isinstance com uma ABC é muitas vezes melhor que verificar se um argumento
de função é do tipo concreto dict, porque daí tipos alternativos de mapeamentos
                    podem ser usados.



            Diagrama de classe simplificado para MutableMapping e suas superclasses de collections.abc
     (as setas de herança apontam das subclasses para as superclasses; nomes em itálico indicam classes
      e métodos abstratos.



    ----------------------------------------------------------------------------------------------------
                Collection        <-        Mapping           <-        MutableMapping
    ----------------------------------------------------------------------------------------------------
                __contains__                __getitem__                 __setitem__
                __iter__                    __contains__                __delitem__
                __len__                     __eq__                      clear
              _______________               __ne__                      pop
                                            get                         popitem
                                            items                       setdefault
                                            keys                        update
                                            values                    ____________________
                                          ________________
    ----------------------------------------------------------------------------------------------------


    Para implementar um mapeamento personalizado, é mais fácil estender collections.UserDict, ou envolver um dict
por composição, ao invés de criar uma subclasse dessas ABCs. A classe collections.UserDict e todas as classes
concretas de mapeamentos da biblioteca padrão encapsulam o dict básico em suas implementações, que por sua vez é
criado sobre uma tabela de hash. Assim, todas elas compartilham a mesma limitação, as chaves precisam ser hashable
(os valores não precisam ser hashable, só as chaves).




            # O que é hashable?

    Aqui está parte da definição de hashable, adaptado do Glossário do Python:
                                    ->  " Um objeto é hashable se tem um código de hash que nunca muda
                                        durante seu ciclo de vida (precisa ter um método hash()) e pode
                                        ser comparado com outros objetos (precisa ter um método eq()).
                                        Objetos hashable que são comparados como iguais devem ter o
                                        mesmo código de hash. "


    Tipos numéricos e os tipos planos imutáveis str e bytes são todos hashable. Tipos contêineres são hashable se
forem imutáveis e se todos os objetos por eles contidos forem também hashable. Um frozenset é sempre hashable, pois
todos os elementos que ele contém devem ser, por definição, hashable. Uma tuple é hashable apenas se todos os seus
itens também forem. Observe as tuplas tt, tl, and tf:



-----------------------------------------------------------------------
>>> tt = (1, 2, (30, 40))
>>> hash(tt)
8027212646858338501
>>> tl = (1, 2, [30, 40])
>>> hash(tl)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> tf = (1, 2, frozenset([30, 40]))
>>> hash(tf)
-4118419923444501110
-----------------------------------------------------------------------



    ** O código de hash de um objeto pode ser diferente dependendo da versão do Python, da arquitetura da máquina,
e pelo sal acrescentado ao cálculo do hash por razões de segurança.[27] O código de hash de um objeto corretamente
implementado tem a garantia de ser constante apenas dentro de um processo Python.

    Tipos definidos pelo usuário são hashble por default, pois seu código de hash é seu id(), e o método __eq__()
herdado da classe objetct apenas compara os IDs dos objetos. Se um objeto implementar seu próprio __eq__(), que
leve em consideração seu estado interno, ele será hashable apenas se seu __hash__() sempre devolver o mesmo código
de hash.
    Na prática, isso exige que __eq__() e __hash__() levem em conta apenas atributos de instância que nunca mudem
durante a vida do objeto.

