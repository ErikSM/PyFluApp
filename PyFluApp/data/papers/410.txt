                            4.10. APIs de modo dual para str e bytes
    A biblioteca padrão do Python tem funções que aceitam argumentos str ou bytes e se comportam de
forma diferente dependendo do tipo recebido. Alguns exemplos podem ser encontrados nos módulos re e os.





            # str versus bytes em expressões regulares



    Se você criar uma expressão regular com bytes, padrões tal como \d e \w vão casar apenas com
caracteres ASCII; por outro lado, se esses padrões forem passados como str, eles vão casar com dígitos
Unicode ou letras além do ASCII. O Exemplo 1 e o Exemplo 2 comparam como letras, dígitos ASCII,
superescritos e dígitos tamil casam em padrões str e bytes.


------------------------------------------------------------------------------------------------
Exemplo 1: ramanujan.py: compara o comportamento de expressões regulares simples
como str e como bytes
------------------------------------------------------------------------------------------------
import re

re_numbers_str = re.compile(r'\d+')     # (1)
re_words_str = re.compile(r'\w+')
re_numbers_bytes = re.compile(rb'\d+')  # (2)
re_words_bytes = re.compile(rb'\w+')

text_str = ("Ramanujan saw \u0be7\u0bed\u0be8\u0bef"  # (3)
            " as 1729 = 1³ + 12³ = 9³ + 10³.")        # (4)

text_bytes = text_str.encode('utf_8')  # (5)

print(f'Text\n  {text_str!r}')
print('Numbers')
print('  str  :', re_numbers_str.findall(text_str))      # (6)
print('  bytes:', re_numbers_bytes.findall(text_bytes))  # (7)
print('Words')
print('  str  :', re_words_str.findall(text_str))        # (8)
print('  bytes:', re_words_bytes.findall(text_bytes))    # (9)
------------------------------------------------------------------------------------------------
        1.As duas primeiras expressões regulares são do tipo str.
        2.As duas últimas são do tipo bytes.
        3.Texto Unicode para ser usado na busca, contendo os dígitos tamil para 1729 (a linha
            lógica continua até o símbolo de fechamento de parênteses).
        4.Essa string é unida à anterior no momento da compilação (veja "2.4.2. String literal
            concatenation" (Concatenação de strings literais) em A Referência da Linguagem Python).
        5.Uma string bytes é necessária para a busca com as expressões regulares bytes.
        6.O padrão str r'\d+' casa com os dígitos ASCII e tamil.
        7.O padrão bytes rb'\d+' casa apenas com os bytes ASCII para dígitos.
        8.O padrão str r'\w+' casa com letras, superescritos e dígitos tamil e ASCII.
        9.O padrão bytes rb'\w+' casa apenas com bytes ASCII para letras e dígitos.




-------------------------------------------------------------------------------------
Exemplo 2: Captura de tela da execução de ramanujan.py do Exemplo 1.
-------------------------------------------------------------------------------------
Text
  'Ramanujan saw ௧௭௨௯ as 1729 = 1³ + 12³ = 9³ + 10³.'
Numbers
  str  : ['௧௭௨௯', '1729', '1', '12', '9', '10']
  bytes: [b'1729', b'1', b'12', b'9', b'10']
Words
  str  : ['Ramanujan', 'saw', '௧௭௨௯', 'as', '1729', '1³', '12³', '9³', '10³']
  bytes: [b'Ramanujan', b'saw', b'as', b'1729', b'1', b'12', b'9', b'10']
-------------------------------------------------------------------------------------

    O Exemplo 1 é um exemplo trivial para destacar um ponto: você pode usar expressões regulares
com str ou bytes, mas nesse último caso os bytes fora da faixa do ASCII são tratados como
caracteres que não representam dígitos nem palavras.

    Para expressões regulares str, há uma marcação re.ASCII, que faz \w, \W, \b, \B, \d, \D,
\s, e \S executarem um casamento apenas com ASCII.

               ** Veja a documentaçào do módulo re para maiores detalhes.
                (documentacao: https://docs.python.org/pt-br/3/library/re.html)





            # str versus bytes nas funções de os

    Outro módulo importante é o os.

    O kernel do GNU/Linux não conhece Unicode então, no mundo real, você pode encontrar nomes de
arquivo compostos de sequências de bytes que não são válidas em nenhum esquema razoável de
codificação, e não podem ser decodificados para str.
    Servidores de arquivo com clientes usando uma variedade de diferentes SOs são particularmente
inclinados a apresentar esse cenário.

    Para mitigar esse problema, todas as funções do módulo os que aceitam nomes de arquivo ou
caminhos podem receber seus argumentos como str ou bytes.
    Se uma dessas funções é chamada com um argumento str, o argumento será automaticamente
convertido usando o codec informado por sys.getfilesystemencoding(), e a resposta do SO será
decodificada com o mesmo codec.
    Isso é quase sempre o que se deseja, mantendo a melhor prática do sanduíche de Unicode.

    Mas se você precisa lidar com (e provavelmente corrigir) nomes de arquivo que não podem ser
processados daquela forma, você pode passar argumentos bytes para as funções de os, e receber
bytes de volta. Esse recurso permite que você processe qualquer nome de arquivo ou caminho,
independende de quantos gremlins encontrar. Veja o Exemplo.

--------------------------------------------------------------------------------
Exemplo: listdir com argumentos str e bytes, e os resultados
--------------------------------------------------------------------------------
>>> os.listdir('.')  # (1)
['abc.txt', 'digits-of-π.txt']
>>> os.listdir(b'.')  # (2)
[b'abc.txt', b'digits-of-\xcf\x80.txt']
--------------------------------------------------------------------------------
        1.O segundo nome de arquivo é "digits-of-π.txt" (com a letra grega pi).
        2.Dado um argumento byte, listdir devolve nomes de arquivos como bytes:
            b'\xcf\x80' é a codificação UTF-8 para a letra grega pi.



    Para ajudar no processamento manual de sequências str ou bytes que são nomes de arquivos
ou caminhos, o módulo os fornece funções especiais de codificação e decodificação,
os.fsencode(name_or_path) e os.fsdecode(name_or_path). Ambas as funções aceitam argumentos
dos tipos str, bytes ou, desde o Python 3.6, um objeto que implemente a interface os.PathLike.

