                            6.3. Identidade, igualdade e apelidos

    Lewis Carroll é o pseudônimo literário do Prof. Charles Lutwidge Dodgson. O Sr. Carroll não é apenas
igual ao Prof. Dodgson, eles são exatamente a mesma pessoa. Exemplo abaixo expressa essa ideia em Python.

-----------------------------------------------------------------
Exemplo: charles e lewis se referem ao mesmo objeto
-----------------------------------------------------------------
>>> charles = {'name': 'Charles L. Dodgson', 'born': 1832}
>>> lewis = charles  (1)
>>> lewis is charles
True
>>> id(charles), id(lewis)  (2)
(4300473992, 4300473992)
>>> lewis['balance'] = 950  (3)
>>> charles
{'name': 'Charles L. Dodgson', 'born': 1832, 'balance': 950}
-----------------------------------------------------------------
    1.lewis é um apelido para charles.
    2.O operador is e a função id confirmam essa afirmação.
    3.Adicionar um item a lewis é o mesmo que adicionar um item
        a charles.

    Entretanto, suponha que um impostor—vamos chamá-lo de Dr. Alexander Pedachenko—diga que é o
verdadeiro Charles L. Dodgson, nascido em 1832. Suas credenciais podem ser as mesmas, mas o
Dr. Pedachenko não é o Prof. Dodgson. Figura 2 ilustra esse cenário.

-----------------------------------------------------------------------------------------------------
Figura: charles e lewis estão vinculados ao mesmo objeto; alex está vinculado a um objeto diferente
de valor igual. Veja a figura aqui: (https://pythonfluente.com/#alias_x_copy)
-----------------------------------------------------------------------------------------------------

    O Exemplo abaixo implementa e testa o objeto alex como apresentado em Figura acima.

--------------------------------------------------------------------------------------------
Exemplo: alex e charles são iguais quando comparados, mas alex não é charles
--------------------------------------------------------------------------------------------
>>> alex = {'name': 'Charles L. Dodgson', 'born': 1832, 'balance': 950}  (1)
>>> alex == charles  (2)
True
>>> alex is not charles  (3)
True
--------------------------------------------------------------------------------------------
        1.alex é uma referência a um objeto que é uma réplica do objeto
            vinculado a charles.
        2.Os objetos são iguais quando comparados devido à implementação
            de __eq__ na classe dict.
        3.Mas são objetos distintos. Essa é a forma pythônica de escrever
            a negação de uma comparação de identidade: a is not b.



    O Exemplo:
----------------------------------------------------------------------------
    >>> charles = {'name': 'Charles L. Dodgson', 'born': 1832}
>>> lewis = charles  (1)
>>> lewis is charles
True
>>> id(charles), id(lewis)  (2)
(4300473992, 4300473992)
>>> lewis['balance'] = 950  (3)
>>> charles
{'name': 'Charles L. Dodgson', 'born': 1832, 'balance': 950}
----------------------------------------------------------------------------
    é um exemplo de apelidamento (aliasing). Naquele código, lewis e charles são apelidos: duas
variáveis vinculadas ao mesmo objeto. Por outro lado, alex não é um apelido para charles: essas variáveis
estão vinculadas a objetos diferentes. Os objetos vinculados a alex e charles tem o mesmo valor (é
isso que == compara)tem identidades diferentes.

    O verdadeiro significado do ID de um objeto depende da implementação da linguagem. Em CPython,
id() retorna o endereço de memória do objeto, mas outro interpretador Python pode retornar algo diferente.
O ponto fundamental é que o ID será sempre um valor numérico único, e ele jamais mudará durante a vida do
objeto.

    Na prática, nós raramente usamos a função id() quando programamos. A verificação de identidade é feita,
na maior parte das vezes, com o operador is, que compara os IDs dos objetos, então nosso código não precisa
chamar id() explicitamente.





            # Escolhendo Entre == e is


    O operador == compara os valores de objetos (os dados que eles contêm), enquanto is compara suas identidades.
    Quando estamos programando, em geral, nos preocupamos mais com os valores que com as identidades dos objetos,
então == aparece com mais frequência que is em programas Python.

    Entretanto, se você estiver comparando uma variável com um singleton (um objeto único) faz mais sentido usar
is. O caso mais comum, de longe, é verificar se a variável está vinculada a None. Esta é a forma recomendada de
fazer isso:

--------------------------------------------------------------------------
x is None
--------------------------------------------------------------------------

E a forma apropriada de escrever sua negação é:

--------------------------------------------------------------------------
x is not None
--------------------------------------------------------------------------

    None é o singleton mais comum que testamos com is. Objetos sentinela são outro exemplo de singletons que testamos
com is. Veja um modo de criar e testar um objeto sentinela:

--------------------------------------------------------------------------
END_OF_DATA = object()
# ... many lines
def traverse(...):
    # ... more lines
    if node is END_OF_DATA:
        return
    # etc.
--------------------------------------------------------------------------

    O operador is é mais rápido que ==, pois não pode ser sobrecarregado. Daí o Python não precisa encontrar e
invocar métodos especiais para calcular seu resultado, e o processamento é tão simples quanto comparar dois IDs
inteiros. Por outro lado, a == b é açúcar sintático para a.__eq__(b). O método __eq__, herdado de object, compara
os IDs dos objetos, então produz o mesmo resultado de is. Mas a maioria dos tipos embutidos sobrepõe __eq__ com
implementações mais úteis, que levam em consideração os valores dos atributos dos objetos. A determinação da
igualdade pode envolver muito processamento —por exemplo, quando se comparam coleções grandes ou estruturas
aninhadas com muitos níveis.



            # A imutabilidade relativa das tuplas

    As tuplas, como a maioria das coleções em Python (lists, dicts, sets, etc...) são contêiners: eles armazenam
eferências para objetos.

    Se os itens referenciados forem mutáveis, eles poderão mudar, mesmo que tupla em si não mude. Em outras
palavras, a imutabilidade das tuplas, na verdade, se refere ao conteúdo físico da estrutura de dados tupla (isto
é, as referências que ela mantém), e não se estende aos objetos referenciados.

    Exemplo abaixo: ilustra uma situação em que o valor de uma tupla muda como resultado de mudanças em um objeto
mutável ali referenciado. O que não pode nunca mudar em uma tupla é a identidade dos itens que ela contém.

----------------------------------------------------------------------------------------------------------------------
Exemplo: t1 e t2 inicialmente são iguais, mas a mudança em um item mutável dentro da tupla t1 as torna diferentes
>>> t1 = (1, 2, [30, 40])  (1)
>>> t2 = (1, 2, [30, 40])  (2)
>>> t1 == t2  (3)
True
>>> id(t1[-1])  (4)
4302515784
>>> t1[-1].append(99)  (5)
>>> t1
(1, 2, [30, 40, 99])
>>> id(t1[-1])  (6)
4302515784
>>> t1 == t2  (7)
False
----------------------------------------------------------------------------------------------------------------------
1.t1 é imutável, mas t1[-1] é mutável.
2.Cria a tupla t2, cujos itens são iguais àqueles de t1.
3.Apesar de serem objetos distintos, quando comparados t1 e t2 são iguais, como esperado.
4.Obtém o ID da lista na posição t1[-1].
5.Modifica diretamente a lista t1[-1].
6.O ID de t1[-1] não mudou, apenas seu valor.
7.t1 e t2 agora são diferentes


    Essa imutabilidade relativa das tuplas está por trás do enigma Seção 2.8.3. Essa também
é razão pela qual não é possível gerar o hash de algumas tuplas, como vimos
em Seção 3.4.1.

    A distinção entre igualdade e identidade tem outras implicações quando você precisa copiar
um objeto. Uma cópia é um objeto igual com um ID diferente. Mas se um objeto contém
outros objetos, é preciso que a cópia duplique os objetos internos ou eles podem ser
compartilhados? Não há uma resposta única. A seguir discutimos esse ponto.

