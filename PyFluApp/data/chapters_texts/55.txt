                            5.5. Introdução às dicas de tipo

    Dicas de tipo—também chamadas anotações de tipo—são formas de declarar o tipo esperado dos
argumentos, dos valores devolvidos, das variáveis e dos atributos de funções.

    A primeira coisa que você precisa saber sobre dicas de tipo é que elas não são impostas de
forma alguma pelo compilador de bytecode ou pelo interpretador do Python.

          **    Essa é uma introdução muito breve sobre dicas de
                tipo, suficiente apenas para que a sintaxe e o
                propósito das anotações usadas nas declarações de
                typing.NamedTuple e @dataclass façam sentido. Vamos
                trata de anotações de tipo nas assinaturas de função
                no Capítulo 8 e de anotações mais avançadas no
                Capítulo 15. Aqui vamos ver principalmente dicas com
                tipos embutidos simples, tais como str, int, e float,
                que são provavelmente os tipos mais comuns usados para
                anotar campos em classes de dados.




            # Nenhum efeito durante a execução


    Pense nas dicas de tipo do Python como "documentação que pode ser verificada por IDEs e
verificadores de tipo".

    Isso porque as dicas de tipo não tem qualquer impacto sobre o comportamento de programas
em Python durante a execução.

----------------------------------------------------------------------------------------------
Exemplo: O Python não exige dicas de tipo durante a execução de um programa
----------------------------------------------------------------------------------------------
>>> import typing
>>> class Coordinate(typing.NamedTuple):
...     lat: float
...     lon: float
...
>>> trash = Coordinate('Ni!', None)
>>> print(trash)
Coordinate(lat='Ni!', lon=None)    # (1)
----------------------------------------------------------------------------------------------
        1.Eu avisei: não há verificação de tipo durante a execução!

    Se você incluir o código do Exemplo acima em um módulo do Python, ela vai rodar e exibir uma
Coordinate sem sentido, e sem gerar qualquer erro ou aviso:

------------------------------------------------------------------
$ python3 nocheck_demo.py
Coordinate(lat='Ni!', lon=None)
------------------------------------------------------------------

    O objetivo primário das dicas de tipo é ajudar os verificadores de tipo externos, como o
Mypy ou o verificador de tipo embutido do PyCharm IDE. Essas são ferramentas de análise
estática: elas verificam código-fonte Python "parado", não código em execução.

    Para observar o efeito das dicas de tipo, é necessário executar umas dessas ferramentas
sobre seu código—como um "linter" (analisador de código). Por exemplo, eis o quê o Mypy tem a
dizer sobre o exemplo anterior:

--------------------------------------------------------------------
$ mypy nocheck_demo.py
nocheck_demo.py:8: error: Argument 1 to "Coordinate" has
incompatible type "str"; expected "float"
nocheck_demo.py:8: error: Argument 2 to "Coordinate" has
incompatible type "None"; expected "float"
--------------------------------------------------------------------

    Como se vê, dada a definição de Coordinate, o Mypy sabe que os dois argumentos para criar
um instância devem ser do tipo float, mas atribuição a trash usa uma str e None.




            # Sintaxe de anotação de variáveis


    Tanto typing.NamedTuple quanto @dataclass usam a sintaxe de anotações de variáveis definida
na PEP 526 (EN). Vamos ver aqui uma pequena introdução àquela sintaxe, no contexto da definição
de atributos em declarações class.

A sintaxe básica da anotação de variáveis é:
------------------------------------
var_name: some_type
------------------------------------

    A seção "Acceptable type hints" (_Dicas de tipo aceitáveis), na PEP 484, explica o que são
tipo aceitáveis. Porém, no contexto da definição de uma classe de dados, os tipos mais úteis
geralmente serão os seguintes:

        * Uma classe concreta, por exemplo str ou FrenchDeck.

        * Um tipo de coleção parametrizada, como list[int], tuple[str, float], etc.

        * typing.Optional, por exemplo Optional[str]—para declarar um campo que pode
            ser uma str ou None.


    Você também pode inicializar uma variável com um valor. Em uma declaração de
typing.NamedTuple ou @dataclass, aquele valor se tornará o default daquele atributo quando o
argumento correspondente for omitido na chamada de inicialização:

-----------------------------------------
var_name: some_type = a_value
-----------------------------------------



            # O significado das anotações de variáveis


    Vimos, no tópico Seção 5.5.1, que dicas de tipo não tem qualquer efeito durante a execução
de um programa. Mas no momento da importação—quando um módulo é carregado—o Python as lê para
construir o dicionário __annotations__, que typing.NamedTuple e @dataclass então usam para
aprimorar a classe.

    Vamos começar essa exploração no Exemplo 10, com uma classe simples, para mais tarde ver
que recursos adicionais são acrescentados por typing.NamedTuple e @dataclass.

-------------------------------------------------------------------------------------
Exemplo: meaning/demo_plain.py: uma classe básica com dicas de tipo
-------------------------------------------------------------------------------------
class DemoPlainClass:
    a: int           # (1)
    b: float = 1.1   # (2)
    c = 'spam'       # (3)
-------------------------------------------------------------------------------------
    1.a se torna um registro em __annotations__, mas é então descartada: nenhum atributo
    chamado a é criado na classe.
    2.b é salvo como uma anotação, e também se torna um atributo de classe com o valor 1.1.
    3.c é só um bom e velho atributo de classe básico, sem uma anotação.

    Podemos checar isso no console, primeiro lendo o __annotations__ da DemoPlainClass, e
daí tentando obter os atributos chamados a, b, e c:

--------------------------------------------------------------------------------------------
>>> from demo_plain import DemoPlainClass
>>> DemoPlainClass.__annotations__
{'a': <class 'int'>, 'b': <class 'float'>}
>>> DemoPlainClass.a
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: type object 'DemoPlainClass' has no attribute 'a'
>>> DemoPlainClass.b
1.1
>>> DemoPlainClass.c
'spam'
--------------------------------------------------------------------------------------------

    Observe que o atributo especial __annotations__ é criado pelo interpretador para
registrar dicas de tipo que aparecem no código-fonte—mesmo em uma classe básica.

    O a sobrevive apenas como uma anotação, não se torna um atributo da classe, porque
nenhum valor é atribuído a ele.[59] O b e o c são armazenados como atributos de classe
porque são vinculados a valores.

    Nenhum desses três atributos estará em uma nova instância de DemoPlainClass. Se você
criar um objeto o = DemoPlainClass(), o.a vai gerar um AttributeError, enquanto o.b e o.c
vão obter os atributos de classe com os valores 1.1 e 'spam'—que é apenas o comportamento
normal de um objeto Python.





   - Inspecionando uma typing.NamedTuple:


    Agora vamos examinar uma classe criada com typing.NamedTuple (Segundo Exemplo), usando os
mesmos atributos e anotações da DemoPlainClass (Primeiro Exemplo) .

DemoPlainClass:
-------------------------------------------------------------------------------------
Primeiro Exemplo: meaning/demo_plain.py: uma classe básica com dicas de tipo
-------------------------------------------------------------------------------------
class DemoPlainClass:
    a: int           # (1)
    b: float = 1.1   # (2)
    c = 'spam'       # (3)
-------------------------------------------------------------------------------------

typing.NamedTuple:
-------------------------------------------------------------------------------------
Segundo Exemplo: meaning/demo_nt.py: uma classe criada com typing.NamedTuple
-------------------------------------------------------------------------------------
import typing

class DemoNTClass(typing.NamedTuple):
    a: int           # (1)
    b: float = 1.1   # (2)
    c = 'spam'       # (3)
-------------------------------------------------------------------------------------
    1.a se torna uma anotação e também um atributo de instância.
    2.b é outra anotação, mas também se torna um atributo de instância com o valor default 1.1.
    3.c é só um bom e velho atributo de classe comum; não será mencionado em nenhuma anotação.


Inspecionando a DemoNTClass, temos o seguinte:
-----------------------------------------------------------------------
>>> from demo_nt import DemoNTClass
>>> DemoNTClass.__annotations__
{'a': <class 'int'>, 'b': <class 'float'>}
>>> DemoNTClass.a
<_collections._tuplegetter object at 0x101f0f940>
>>> DemoNTClass.b
<_collections._tuplegetter object at 0x101f0f8b0>
>>> DemoNTClass.c
'spam'
-----------------------------------------------------------------------

    Aqui vemos as mesmas anotações para a e b que vimos no Primeiro Exemplo. Mas
typing.NamedTuple cria os atributos de classe a e b. O atributo c é apenas um atributo de
classe simples, com o valor 'spam'.

    Os atributos de classe a e b são descritores (descriptors)—um recurso avançado tratado
no Capítulo 23.
    Por ora, pense neles como similares a um "getter" de propriedades do objeto: métodos que
não exigem o operador explícito de chamada () para obter um atributo de instância.
    Na prática, isso significa que a e b vão funcionar como atributos de instância somente
para leitura—o que faz sentido, se lembrarmos que instâncias de DemoNTClass são apenas tuplas
chiques, e tuplas são imutáveis.


    A DemoNTClass também recebe uma docstring personalizada:

---------------------------------------------------------------
>>> DemoNTClass.__doc__
'DemoNTClass(a, b)'
---------------------------------------------------------------

    Vamos examinar uma instância de DemoNTClass:

---------------------------------------------------------------
>>> nt = DemoNTClass(8)
>>> nt.a
8
>>> nt.b
1.1
>>> nt.c
'spam'
---------------------------------------------------------------

    Para criar nt, precisamos passar pelo menos o argumento a para DemoNTClass. O construtor
também aceita um argumento b, mas como este último tem um valor default (de 1.1), ele é
opcional.
    Como esperado, o objeto nt possui os atributos a e b; ele não tem um atributo c, mas o
Python obtém c da classe, como de hábito.



        - Inspecionando uma classe decorada com dataclass:

    Vamos agora examinar o Outro Exemplo.

------------------------------------------------------------------
Exemplo: meaning/demo_dc.py: uma classe decorada com @dataclass
------------------------------------------------------------------
from dataclasses import dataclass

@dataclass
class DemoDataClass:
    a: int           # (1)
    b: float = 1.1   # (2)
    c = 'spam'       # (3)
------------------------------------------------------------------
    1.a se torna uma anotação, e também um atributo de instância
        controlado por um descritor.
    2.b é outra anotação, e também se torna um atributo de instância
        com um descritor e um valor default de 1.1.
    3.c é apenas um atributo de classe comum; nenhuma anotação se
        refere a ele.

    Podemos então verificar o __annotations__, o __doc__, e os atributos a, b, c no
DemoDataClass:

------------------------------------------------------------------
>>> from demo_dc import DemoDataClass
>>> DemoDataClass.__annotations__
{'a': <class 'int'>, 'b': <class 'float'>}
>>> DemoDataClass.__doc__
'DemoDataClass(a: int, b: float = 1.1)'
>>> DemoDataClass.a
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: type object 'DemoDataClass' has no attribute 'a'
>>> DemoDataClass.b
1.1
>>> DemoDataClass.c
'spam'
------------------------------------------------------------------

    O __annotations__ e o __doc__ não guardam surpresas. Entretanto, não há um atributo
chamado 'a' em DemoDataClass—diferente do que ocorre na DemoNTClass, que inclui um
descritor para obter a das instâncias da classe, como atributos somente para leitura
(aquele misterioso <_collections.tuplegetter>).
    Isso ocorre porque o atributo 'a' só existirá nas instâncias de DemoDataClass. Será um
atributo público, que poderemos obter e definir, a menos que a classe seja frozen. Mas
'b' e 'c' existem como atributos de classe, com 'b' contendo o valor default para o atributo
de instância 'b', enquanto 'c' é apenas um atributo de classe que não será vinculado a
instâncias.

Vejamos como se parece uma instância de DemoDataClass:

------------------------------------------------------------------
>>> dc = DemoDataClass(9)
>>> dc.a
9
>>> dc.b
1.1
>>> dc.c
'spam'
------------------------------------------------------------------

    Novamente, 'a' e 'b' são atributos de instância, e 'c' é um atributo de classe obtido através
da instância.

    Como mencionado, instâncias de DemoDataClass são mutáveis—e nenhuma verificação de tipo é
realizada durante a execução:

--------------------------------------
>>> dc.a = 10
>>> dc.b = 'oops'
--------------------------------------

Podemos fazer atribuições ainda mais ridículas:

--------------------------------------
>>> dc.c = 'whatever'
>>> dc.z = 'secret stash'
--------------------------------------

    Agora a instância dc tem um atributo c—mas isso não muda o atributo de classe c. E podemos
adicionar um novo atributo z. Isso é o comportamento normal do Python: instâncias regulares
podem ter seus próprios atributos, que não aparecem na classe.

