                            3.9. Consequências práticas da forma como dict funciona



    A implementação da tabela de hash do dict do Python é muito eficiente, mas é importante entender os efeitos
práticos desse design:

        - Chaves devem ser objetos hashable. Eles devem implementar métodos __hash__ e __eq__ apropriados.

        - O acesso aos itens através da chave é muito rápido. Mesmo que um dict tenha milhões de chaves, o
        Python pode localizar uma chave diretamente, computando o código hash da chave e derivando um
        deslocamento do índice na tabela de hash, com um possível ônus de um pequeno número de tentativas
        até encontrar a entrada correspondente.

        - A ordenação das chaves é preservada, como efeito colateral de um layout de memória mais compacto
        para dict no CPython 3.6, que se tornou um recurso oficial da linguagem no 3.7.

        - Apesar de seu novo layout compacto, os dicts apresentam, inevitavelmente, um uso adicional
        significativo de memória. A estrutura de dados interna mais compacta para um contêiner seria um
        array de ponteiros para os itens.[38] Comparado a isso, uma tabela de hash precisa armazenar mais
        dados para cada entrada e, para manter a eficiência, o Python precisa manter pelo menos um terço das
        linhas da tabela de hash vazias.

        - Para economizar memória, evite criar atributos de instância fora do método __init__.

    Essa última dica, sobre atributos de instância, é consequência do comportamento default do Python, de
armazenar atributos de instância em um atributo __dict__ especial, que é um dict vinculado a cada instância.
    Desde a implementação da PEP 412—Key-Sharing Dictionary (Dicionário de Compartilhamento de Chaves) (EN),
no Python 3.3, instâncias de uma classe podem compartilhar uma tabela de hash comum, armazenada com a classe.
Essa tabela de hash comum é compartilhada pelo __dict__ de cada nova instância que, quando __init__ retorna,
tenha os mesmos nomes de atributos que a primeira instância daquela classe a ser criada.
    O __dict__ de cada instância então pode manter apenas seus próprios valores de atributos como uma simples
array de ponteiros. Acrescentar um atributo de instância após o __init__ obriga o Python a criar uma nova tabela
de hash só para o __dict__ daquela instância (que era o comportamento default antes do Python 3.3).
    De acordo com a PEP 412, essa otimização reduz o uso da memória entre 10% e 20% em programas orientados a
objetos. Os detalhes das otimizações do layout compacto e do compartilhamento de chaves são bastante complexos.

***OBS: (Para saber mais, por favor leio o texto "Internals of sets and dicts" (EN) em fluentpython.com).
