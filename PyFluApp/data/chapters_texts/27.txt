                        2.7. Fatiamento


    Um recurso comum a list, tuple, str, e a todos os tipos de sequência em Python, é o
suporte a operações de fatiamento, que são mais potentes do que a maioria das pessoas percebe.





                    # Por que fatias e faixas excluem o último item?


    A convenção pythônica de excluir o último item em fatias e faixas funciona bem com a indexação
iniciada no zero usada no Python, no C e em muitas outras linguagens.

        Algumas características convenientes da convenção são:
           - É fácil ver o tamanho da fatia ou da faixa quando apenas a posição final é dada: tanto
            range(3) quanto my_list[:3] produzem três itens.

           - É fácil calcular o tamanho de uma fatia ou de uma faixa quando o início e o fim são
            dados: basta subtrair fim-início.

           - É fácil cortar uma sequência em duas partes em qualquer índice x, sem sobreposição:
            simplesmente escreva my_list[:x] e my_list[x:].




Por exemplo:
------------------------------------------------------------
        >>> l = [10, 20, 30, 40, 50, 60]
        >>> l[:2]  # split at 2
        [10, 20]
        >>> l[2:]
        [30, 40, 50, 60]
        >>> l[:3]  # split at 3
        [10, 20, 30]
        >>> l[3:]
        [40, 50, 60]
------------------------------------------------------------







                    # Objetos fatia


    Isso não é segredo, mas vale a pena repetir, só para ter certeza: s[a:b:c] pode ser usado para
especificar um passo ou salto c, fazendo com que a fatia resultante pule itens. O passo pode ser
também negativo, devolvendo os itens em ordem inversa.




Três exemplos esclarecem a questão:
-----------------------------------------------
>>> s = 'bicycle'

>>> s[::3]
'bye'

>>> s[::-1]
'elcycib'

>>> s[::-2]
'eccb'
-----------------------------------------------






                    # Atribuindo a fatias

    Sequências mutáveis podem ser transplantadas, extirpadas e, de forma geral, modificadas no lugar
com o uso da notação de fatias no lado esquerdo de um comando de atribuição ou como alvo de um
comando del.




Os próximos exemplos dão uma ideia do poder dessa notação:
--------------------------------------------------------------------------
>>> l = list(range(10))
>>> l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> l[2:5] = [20, 30]
>>> l
[0, 1, 20, 30, 5, 6, 7, 8, 9]

>>> del l[5:7]
>>> l
[0, 1, 20, 30, 5, 8, 9]

>>> l[3::2] = [11, 22]
>>> l
[0, 1, 20, 11, 5, 22, 9]

>>> l[2:5] = 100                            # (1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only assign an iterable

>>> l[2:5] = [100]
>>> l
[0, 1, 100, 22, 9]
--------------------------------------------------------------------------
1. Quando o alvo de uma atribuição é uma fatia, o lado direito deve ser um
objeto iterável, mesmo que tenha apenas um item.


