                            2.9. list.sort versus a função embutida sorted


    O método list.sort ordena uma lista no mesmo lugar—isto é, sem criar uma cópia. Ele devolve None
para nos lembrar que muda a própria instância e não cria uma nova lista. Essa é uma convenção
importante da API do Python: funções e métodos que mudam um objeto no mesmo lugar deve devolver None,
para deixar claro a quem chamou que o receptor[17] foi modificado, e que nenhum objeto novo foi
criado.
            * Um comportamento similar pode ser observado, por exemplo, na função random.shuffle(s),
        que devolve None após embaralhar os itens de uma sequência mutável in-place (no lugar), isto é,
        mudando a posição dos itens dentro da própria sequência.

    A função embutida sorted, por outro lado, cria e devolve uma nova lista. Ela aceita qualquer objeto
iterável como um argumento, incluindo sequências imutáveis e geradores. Independente do tipo do iterável
passado a sorted, ela sempre cria e devolve uma nova lista.



    Tanto list.sort quanto sorted podem receber dois argumentos de palavra-chave opcionais: (reverse, key)
    ------------------------------------------------------------------------------------------------------------
        - reverse:
                    Se True, os itens são devolvidos em ordem decrescente (isto é, invertendo a
               comparação dos itens). O default é False.


        - key:
                    Uma função com um argumento que será aplicada a cada item, para produzir sua
                chave de ordenação. Por exemplo, ao ordenar uma lista de strings, key=str.lower
                pode ser usada para realizar uma ordenação sem levar em conta maiúsculas e
                minúsculas, e key=len irá ordenar as strings pela quantidade de caracteres. O
                default é a função identidade (isto é, os itens propriamente ditos são
                comparados).
    -------------------------------------------------------------------------------------------------------------

