                            4.2. Questões de caracteres


O conceito de "string" é bem simples: uma string é uma sequência de caracteres. O problema está na
definição de "caractere".

    Em 2023, a melhor definição de "caractere" que temos é um caractere Unicode. Consequentemente, os
itens que compõe um str do Python 3 são caracteres Unicode, como os itens de um objeto unicode no
Python 2.
    Em contraste, os itens de uma str no Python 2 são bytes, assim como os itens num objeto bytes do
Python 3.



    O padrão Unicode separa explicitamente a identidade dos caracteres de representações binárias
específicas:

    -       A identidade de um caractere é chamada de ponto de código (code point). É um número
        de 0 a 1.114.111 (na base 10), representado no padrão Unicode na forma de 4 a 6 dígitos
        hexadecimais precedidos pelo prefixo "U+", de U+0000 a U+10FFFF. Por exemplo, o ponto de
        código da letra A é U+0041, o símbolo do Euro é U+20AC, e o símbolo musical da clave de
        sol corresponde ao ponto de código U+1D11E. Cerca de 13% dos pontos de código válidos tem
        caracteres atribuídos a si no Unicode 13.0.0, a versão do padrão usada no Python 3.10.

    -       Os bytes específicos que representam um caractere dependem da codificação (encoding)
        usada. Uma codificação, nesse contexto, é um algoritmo que converte pontos de código para
        sequências de bytes, e vice-versa. O ponto de código para a letra A (U+0041) é codificado
        como um único byte, \x41, na codificação UTF-8, ou como os bytes \x41\x00 na codificação
        UTF-16LE. Em um outro exemplo, o UTF-8 exige três bytes para codificar o símbolo do
        Euro (U+20AC): \xe2\x82\xac. Mas no UTF-16LE o mesmo ponto de código é U+20AC representado
        com dois bytes: \xac\x20.


    Converter pontos de código para bytes é codificar; converter bytes para pontos de código é
decodificar. Veja o Exemplo abaixo.


--------------------------------------------------------------
Exemplo 1. Codificando e decodificando
--------------------------------------------------------------
>>> s = 'café'
>>> len(s)  # (1)
4
>>> b = s.encode('utf8')  # (2)
>>> b
b'caf\xc3\xa9'  # (3)
>>> len(b)  # (4)
5
>>> b.decode('utf8')  # (5)
'café'
--------------------------------------------------------------

        1.A str 'café' tem quatro caracteres Unicode.
        2.Codifica str para bytes usando a codificação UTF-8.
        3.bytes literais são prefixados com um b.
        4.bytes b tem cinco bytes (o ponto de código para "é" é
            codificado com dois bytes em UTF-8).
        5.Decodifica bytes para str usando a codificação UTF-8.



        **     Um jeito fácil de sempre lembrar a distinção entre .decode() e .encode() é
            se convencer que sequências de bytes podem ser enigmáticos dumps de código de
            máquina, ao passo que objetos str Unicode são texto "humano". Daí que faz
            sentido decodificar bytes em str, para obter texto legível por seres humanos,
            e codificar str em bytes, para armazenamento ou transmissão.



    Apesar do str do Python 3 ser quase o tipo unicode do Python 2 com um novo nome, o bytes do Python 3 não
é meramente o velho str renomeado, e há também o tipo estreitamente relacionado bytearray. Então vale a pena
examinar os tipos de sequências binárias antes de avançar para questões de codificação/decodificação.
