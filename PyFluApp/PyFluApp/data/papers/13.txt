                          1.3. Como os métodos especiais são utilizados



    A primeira coisa para se saber sobre os métodos especiais é que eles foram feitos para serem
chamados pelo interpretador Python, e não por você. Você não escreve my_object.__len__().
Escreve len(my_object) e, se my_object é uma instância de uma classe definida pelo usuário,
então o Python chama o método __len__ que você implementou.

    Mas o interpretador pega um atalho quando está lidando com um tipo embutido como list, str,
bytearray, ou extensões como os arrays do NumPy. As coleções de tamanho variável do Python escritas
em C incluem uma struct chamada PyVarObject, com um campo ob_size que mantém o número de itens na
coleção. Então, se my_object é uma instância de algum daqueles tipos embutidos, len(my_object) lê o
valor do campo ob_size, e isso é muito mais rápido que chamar um método.

    Na maior parte das vezes, a chamada a um método especial é implícita. Por exemplo, o
comando for i in x: na verdade, gera uma invocação de iter(x), que por sua vez pode
chamar x.__iter__() se esse método estiver disponível, ou usar x.__getitem__(), como no
exemplo do FrenchDeck.

    Em condições normais, seu código não deveria conter muitas chamadas diretas a métodos especiais.
A menos que você esteja fazendo muita metaprogramação, implementar métodos especiais deve ser muito
mais frequente que invocá los explicitamente.

    Sendo assim, se você precisa invocar um método especial,
é melhor chamar a função embutida relacionada (por exemplo, len, iter, str, etc.).



>> Alguns dos usos mais importantes dos métodos especiais:

                    * Emular tipos numéricos
                            Exemplos:
                                - Método: __add__    Operador: +
                                - Método: __mul__    Operador: *

                    * Representar objetos na forma de strings
                            Exemplos:
                                - __repr__ : é chamado pelo repr embutido para obter a
                                      representação do objeto como string, para inspeção
                                - __str__ é chamado pelo método embutido str(). Ele
                                      deve devolver uma string para ser exibida aos usuários finais

                    * Determinar o valor booleano de um objeto
                            Obs:
                                - Por default, instâncias de classes definidas pelo usuário são
                                  consideradas verdadeiras, a menos que __bool__ ou __len__ estejam
                                  implementadas. Basicamente, bool(x) chama x.__bool__() e usa o
                                  resultado

                    * Implementar coleções
                            Obs:
                                - Interfaces essenciais: Iterable(for), Sized(len), Container(in)
                                - Especializações: Sequence(list,str), Mapping(dict), Set(set)
