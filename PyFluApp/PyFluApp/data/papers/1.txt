
                               1. O modelo de dados Python



    Uma das melhores qualidades do Python é sua consistência. Após trabalhar com Python por
um tempo, é possível intuir de maneira precisa como os recursos que você acabou de
aprender funcionam.


    No entanto, se você aprendeu outra linguagem orientada a objetos antes do Python, pode achar
estranho usar len(collection) em vez de collection.len(). Essa aparente estranheza é apenas a ponta
de um iceberg que, quando bem compreendido, é a chave para tudo o que chamamos de pythônico.


    Você pode pensar no Modelo de Dados como uma descrição do Python na forma de uma Framework. Ele
formaliza as interfaces dos elementos constituintes da linguagem, como: sequências, funções, iteradores,
corrotinas, classes, gerenciadores de contexto e assim por diante.


    Para criar novas classes, o interpretador Python invoca métodos especiais para
executar operações básicas em objetos, geralmente acionados por sintaxe especial. Por
exemplo, a sintaxe obj[key] é coberta pelo método especial __getitem__. Para resolver
my_collection[key], o interpretador chama my_collection.__getitem__(key).retador
chama my_collection.__getitem__(key).
