                                3.3. Pattern matching com mapeamentos


    A instrução match/case suporta sujeitos que sejam objetos mapeamento. Padrões para mapeamentos
se parecem com literais dict, mas podem casar com instâncias de qualquer subclasse real ou virtual
de collections.abc.Mapping.

    Tipos diferentes de padrões podem ser combinados e aninhados. Graças à desestruturação, o pattern
matching é uma ferramenta poderosa para processar registros estruturados como sequências e mapeamentos
aninhados, que frequentemente precisamos ler de APIs JSON ou bancos de dados com schemas semi-estruturados,
como o MongoDB, o EdgeDB, ou o PostgreSQL.

    As dicas de tipo simples em get_creators tornam claro que ela recebe um dict e devolve uma list.

            Exemplo: creator.py: get_creators() extrai o nome dos criadores em registros de mídia:
            ----------------------------------------------------------------------------------------------
                            def get_creators(record: dict) -> list:
                                match record:
                                    case {'type': 'book', 'api': 2, 'authors': [*names]}:           # (1)
                                        return names
                                    case {'type': 'book', 'api': 1, 'author': name}:                # (2)
                                        return [name]
                                    case {'type': 'book'}:                                          # (3)
                                        raise ValueError(f"Invalid 'book' record: {record!r}")
                                    case {'type': 'movie', 'director': name}:                       # (4)
                                        return [name]
                                    case _:  # (5)
                                        raise ValueError(f'Invalid record: {record!r}')
            ----------------------------------------------------------------------------------------------
            1.Casa com qualquer mapeamento na forma 'type': 'book', 'api' :2, e uma chave 'authors' mapeada
              para uma sequência. Devolve os itens da sequência, como uma nova list.
            2.Casa com qualquer mapeamento na forma 'type': 'book', 'api' :1, e uma chave 'author' mapeada
              para qualquer objeto. Devolve aquele objeto dentro de uma list.
            3.Qualquer outro mapeamento na forma 'type': 'book' é inválido e gera um ValueError.
            4.Casa qualquer mapeamento na forma 'type': 'movie' e uma chave 'director' mapeada para um único
              objeto. Devolve o objeto dentro de uma list.
            5.Qualquer outro sujeito é inválido e gera um ValueError.



            ** O Exemplo mostra algumas práticas úteis para lidar com dados semi-estruturados, tais como
            registros JSON:

                    - Incluir um campo descrevendo o tipo de registro (por exemplo, 'type': 'movie')

                    - Incluir um campo identificando a versão do schema (por exemplo, 'api': 2'), para
                      permitir evoluções futuras das APIs públicas.

                    - Ter cláusulas case para processar registros inválidos de um tipo específico (por
                      exemplo, 'book'), bem como um case final para capturar tudo que tenha passado pelas
                      condições anteriores.

